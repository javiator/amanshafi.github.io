# Content Creation Guidelines

## Post Creation Process

### 1. Determine Evolution Assignment
- **Evolution 1**: Single-File Foundation (Python, Flask, SQLAlchemy)
- **Evolution 2**: Modular Architecture (Python, Flask, FastAPI, React)
- **Evolution 3**: Java Enterprise Stack (Java, Spring Boot, React, Docker)
- **Evolution 4**: AI-Enhanced Interface (AI/ML, LLM APIs, Enhanced UX)
- **Evolution 5**: Conversational Interface (Chat interfaces, NLP, Conversational AI)

### 2. Required Frontmatter
```yaml
---
title: "Your Post Title"
date: YYYY-MM-DD
categories: [Learning, Development, Architecture]
tags: [relevant-tags]
mermaid: true  # If using diagrams
# Evolutionary Project Fields (REQUIRED)
project: "Tenant Management"
project_type: "evolutionary"
evolution: "Evolution X: [Name]"
evolution_number: X
evolution_focus: "[Focus Area]"
---
```

### 3. Post Structure Template
```markdown
# Post Title

[Post introduction paragraph]

{% include evolution/post-navigation.html %}

## Post Content...

{% include evolution/evolution-posts.html %}

## Key Learnings
- What was learned in this post
- How it contributes to the evolution
- What's next in the learning journey
```

### 4. Navigation Components
- **Post Navigation**: `{% include evolution/post-navigation.html %}` - Evolution context and navigation (includes project branding)
- **Evolution Posts**: `{% include evolution/evolution-posts.html %}` - Other posts in the same evolution

## Content Types

### Evolution Posts
- **Transition Posts**: Moving from one evolution to another
- **Architecture Posts**: Deep dive into system design
- **Implementation Posts**: Technical implementation details
- **Learning Posts**: What was learned and why

### Supporting Content
- **Requirements Posts**: Business requirements and analysis
- **Learning Posts**: General learning and insights
- **Tool Posts**: Technology and tool exploration

## Mermaid Diagram Guidelines

### When to Use Diagrams
- **Architecture Illustrations**: System design and component relationships
- **Evolution Progression**: Showing how evolutions build upon each other
- **Technology Stacks**: Visual representation of technology choices
- **Learning Journey**: Mapping the progression of knowledge

### Diagram Standards
```mermaid
graph TD
    subgraph "Evolution X: [Name]"
        A[Component A]
        B[Component B]
    end
    
    A --> B
    
    %% Styling
    classDef completed fill:#4caf50,stroke:#2e7d32,stroke-width:3px,color:#fff
    classDef active fill:#2196f3,stroke:#1565c0,stroke-width:3px,color:#fff
    classDef planned fill:#9e9e9e,stroke:#616161,stroke-width:3px,color:#fff
    
    class A,B completed
```

### Color Coding
- **ðŸŸ¢ Green (Completed)**: Evolution 1 & 2
- **ðŸ”µ Blue (Active)**: Evolution 3
- **âš« Gray (Planned)**: Evolution 4 & 5

## Navigation Requirements

### Cross-References
- **Evolution Links**: Link to previous/next evolution
- **Post Links**: Link to related posts within same evolution
- **Project Links**: Link back to project hub from individual posts

### Navigation Components
- **Timeline Component**: `{% include evolution/timeline.html %}`
- **Navigation Component**: `{% include evolution/navigation.html %}`
- **Context Component**: `{% include evolution/context.html %}`

## Quality Checklist

### Before Publishing
- âœ… Post assigned to correct evolution
- âœ… Evolution metadata included
- âœ… Cross-references added
- âœ… Mermaid diagrams included (if applicable)
- âœ… Navigation links working
- âœ… Learning focus emphasized
- âœ… Evolution context clear

### After Publishing
- âœ… Update project hub if needed
- âœ… Update evolution page if needed
- âœ… Update posts index if needed
- âœ… Update homepage if needed
- âœ… Test all navigation links
- âœ… Verify Mermaid diagrams render correctly

## Content Maintenance

### Regular Updates
- **Evolution Status**: Update status as evolutions progress
- **Navigation Links**: Ensure all cross-references work
- **Diagrams**: Keep Mermaid diagrams current with content
- **Metadata**: Maintain evolution metadata consistency

### Evolution Transitions
- **Complete Evolution**: Mark as âœ… Complete
- **Start New Evolution**: Mark as ðŸ”„ Active
- **Update Timeline**: Reflect new status in all components
- **Update Navigation**: Add new evolution to navigation components