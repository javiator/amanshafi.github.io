# Evolutionary Project Framework

## Project Context
This is a Jekyll-based blog showcasing **"Tenant Management: An Evolutionary Project"** - a systematic approach to architectural evolution through 5 different technology stacks and architectural approaches.

## Core Concept
The blog centers around evolving a single domain (tenant management) through multiple architectural approaches:
- **Evolution 1**: Single-File Foundation (âœ… Complete)
- **Evolution 2**: Modular Architecture (âœ… Complete)  
- **Evolution 3**: Java Enterprise Stack (ðŸ”„ Active)
- **Evolution 4**: AI-Enhanced Interface (ðŸ“‹ Planned)
- **Evolution 5**: Conversational Interface (ðŸ“‹ Planned)

## Key Principles
1. **Progressive Complexity**: Each evolution builds upon previous learnings
2. **Technology Mastery**: Deep dive into different technology stacks
3. **Architectural Patterns**: From simple to enterprise-ready architectures
4. **Decision Making**: Documented reasoning behind each architectural choice
5. **Portfolio Value**: Comprehensive case study in software evolution

## Content Structure

### Directory Organization
```
_pages/projects/tenant-management/
â”œâ”€â”€ index.md (Project Hub)
â”œâ”€â”€ evolution-1/index.md
â”œâ”€â”€ evolution-2/index.md  
â”œâ”€â”€ evolution-3/index.md
â”œâ”€â”€ evolution-4/index.md
â”œâ”€â”€ evolution-5/index.md
â””â”€â”€ posts/index.md (Chronological view)

_includes/evolution/
â”œâ”€â”€ timeline.html
â”œâ”€â”€ navigation.html
â”œâ”€â”€ context.html
â”œâ”€â”€ post-navigation.html
â”œâ”€â”€ project-tags.html
â””â”€â”€ evolution-posts.html
```

### Post Metadata Requirements
All tenant management posts MUST include:
```yaml
# Evolutionary Project Fields
project: "Tenant Management"
project_type: "evolutionary"
evolution: "Evolution X: [Name]"
evolution_number: X
evolution_focus: "[Focus Area]"
```

## Content Guidelines

### When Creating New Posts
1. **Assign to Evolution**: Determine which evolution the post belongs to
2. **Add Evolution Metadata**: Include the 5 evolution fields in frontmatter
3. **Cross-Reference**: Link to related posts in the same evolution
4. **Navigation**: Include evolution context and navigation components
5. **Mermaid Diagrams**: Use diagrams to illustrate architectural concepts

### When Updating Existing Content
1. **Maintain Evolution Context**: Keep evolution metadata consistent
2. **Update Navigation**: Ensure cross-evolution links work correctly
3. **Preserve Learning Journey**: Maintain the systematic progression narrative
4. **Update Diagrams**: Keep Mermaid diagrams current with content changes

### When Adding New Evolutions
1. **Create Evolution Page**: Add new evolution page in `/projects/tenant-management/evolution-X/`
2. **Update Project Hub**: Add new evolution to main project page
3. **Update Navigation**: Add to timeline and navigation components
4. **Update Posts Page**: Include in chronological post listing
5. **Update Homepage**: Reflect new evolution in featured project section

## Technical Standards

### Mermaid Diagrams
- Use for architectural illustrations
- Include in frontmatter: `mermaid: true`
- Color-code by status (completed, active, planned)
- Show progression and relationships

### Navigation Components
- **Timeline Component**: Visual evolution progression
- **Navigation Component**: Cross-evolution links
- **Context Component**: Evolution context for individual posts
- **Project Tags Component**: Project branding and quick navigation
- **Post Navigation Component**: Evolution context and navigation for individual posts
- **Evolution Posts Component**: Related posts within the same evolution

### Post Structure
- **Evolution Context**: Include evolution information at post start
- **Cross-References**: Link to related posts in same evolution
- **Navigation**: Include previous/next evolution links
- **Learning Focus**: Emphasize what was learned in each evolution

### Post Navigation Components
- **Project Tags**: `{% include evolution/project-tags.html %}` - Shows project context and quick navigation
- **Post Navigation**: `{% include evolution/post-navigation.html %}` - Evolution context and navigation
- **Evolution Posts**: `{% include evolution/evolution-posts.html %}` - Other posts in the same evolution

## Current Status

### Metrics
- **Total Posts**: 7 (5 evolutionary + 2 supporting)
- **Active Evolutions**: 3 (1, 2, 3)
- **Planned Evolutions**: 2 (4, 5)
- **Technologies Covered**: Python, Flask, Java, Spring Boot, React, Docker

### Evolution Breakdown
- **Evolution 1**: 1 post (Single-File Foundation)
- **Evolution 2**: 2 posts (Modular Architecture)
- **Evolution 3**: 2 posts (Java Enterprise Stack)
- **Evolution 4**: 0 posts (AI-Enhanced Interface - Planned)
- **Evolution 5**: 0 posts (Conversational Interface - Planned)

## Navigation Patterns

### Project Hub Navigation
- **Main Overview**: `/projects/tenant-management/`
- **Evolution Pages**: `/projects/tenant-management/evolution-X/`
- **All Posts**: `/projects/tenant-management/posts/`
- **Individual Posts**: Standard Jekyll post URLs

### Cross-References
- **Evolution Links**: Link between evolutions (previous/next)
- **Post Links**: Link to related posts within same evolution
- **Project Links**: Link back to project hub from individual posts

## Success Criteria

### For New Content
- âœ… Properly assigned to evolution
- âœ… Includes evolution metadata
- âœ… Has appropriate navigation links
- âœ… Uses Mermaid diagrams where relevant
- âœ… Maintains learning journey narrative

### For Updates
- âœ… Preserves evolution context
- âœ… Updates navigation components
- âœ… Keeps diagrams current
- âœ… Maintains systematic progression

## Future Development

### Planned Evolutions
- **Evolution 4**: AI-Enhanced Interface (LLM integration, MCP support)
- **Evolution 5**: Conversational Interface (Chat interfaces, NLP)

### Content Strategy
- **Maintain Progression**: Keep the systematic learning narrative
- **Document Decisions**: Explain architectural choices and trade-offs
- **Show Learning**: Demonstrate what was learned in each evolution
- **Portfolio Value**: Position as comprehensive case study